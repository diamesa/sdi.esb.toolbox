package sdi.accountmanagement;

	
	import java.util.regex.Pattern;
	import java.util.concurrent.TimeUnit;
	import org.testng.annotations.*;
	import static org.testng.Assert.*;
	import org.openqa.selenium.*;
	import org.openqa.selenium.firefox.FirefoxDriver;
	import org.openqa.selenium.support.ui.ExpectedCondition;
	import org.openqa.selenium.support.ui.Select;
	import org.openqa.selenium.support.ui.WebDriverWait;


@SuppressWarnings("unused")
public class BAValidator {
	
	public BAValidator(){
		super();
	}

	public static void main(String[] args){
		 	driver = new FirefoxDriver();
		   	baseUrl = "https://erpm.intel.com/";
		 	//baseUrl = "https://intelone.my.salesforce.com/";
		    driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
		    String[] argumentos= new String[]{"ncarrill", "Intel-0808", "123456" };
		    ValidateBussinesAccount(argumentos);
	}
	

	  /*public void setUp() throws Exception {
	    driver = new FirefoxDriver();
	    baseUrl = "https://erpm.intel.com/";
	    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	  
	  }*/

	 public static void ValidateBussinesAccount(String[] args){
		 if (args.length < 2) {	
			 		System.out.println("parameters missing");	
		 			} 
		 else {
				//Go to ERPM
				 driver.get(baseUrl + "/EOT");
			    //Select user text field and input username
				 driver.findElement(By.id("UserID")).sendKeys(args[0]);
				 driver.findElement(By.id("Password")).sendKeys(args[1]);
				 driver.findElement(By.cssSelector("input.btn.btn-primary")).click();
				//Wait for eRPM page to load
				 (new  WebDriverWait(driver, 90)).until(new ExpectedCondition<Boolean>(){
					 public Boolean apply(WebDriver d){
						 //return d.getCurrentUrl().contains("https://erpm.intel.com/EOT"); 
						 return d.findElements(By.id("searchBusinessAccountMenu")).size()>0;}});
				 //Find and click "BusinessAccount" link
				  driver.findElement(By.id("BusinessAccount")).click();	
				  (new  WebDriverWait(driver, 90)).until(new ExpectedCondition<Boolean>(){
						 public Boolean apply(WebDriver d){
							 return d.findElements(By.id("searchBusinessAccountMenu")).size()>0; }});
				 //Find and click "SearchBusinessAccountMenu"
				  driver.findElement(By.id("searchBusinessAccountMenu")).click();
				  
				    new Select(driver.findElement(By.id("ddlSearchCriteria1"))).selectByVisibleText("Account No.");
				    driver.findElement(By.id("BasicSearchValue1")).clear();
				    driver.findElement(By.id("BasicSearchValue1")).sendKeys(args[2]);
				    driver.findElement(By.id("btnSearch")).click();
				    driver.findElement(By.cssSelector("div.hyperlinkProvider")).click();
				    driver.findElement(By.id("phSearchInput")).clear();
				    driver.findElement(By.id("phSearchInput")).sendKeys("301379668");
				    driver.findElement(By.id("phSearchButton")).click();
				    driver.findElement(By.linkText("Accounts")).click();
				    driver.findElement(By.name("new")).click();
				    driver.findElement(By.cssSelector("#bottomButtonRow > input[name=\"save\"]")).click();
		 		}
		
	 }
	 
	 

	  public void tearDown() throws Exception {
	    driver.quit();
	    String verificationErrorString = verificationErrors.toString();
	    if (!"".equals(verificationErrorString)) {
	      fail(verificationErrorString);
	    }
	  }


	
	
	
	
	
	
	
	
	
	
	

	  private boolean isElementPresent(By by) {
	    try {
	      driver.findElement(by);
	      return true;
	    } catch (NoSuchElementException e) {
	      return false;
	    }
	  }

	  private boolean isAlertPresent() {
	    try {
	      driver.switchTo().alert();
	      return true;
	    } catch (NoAlertPresentException e) {
	      return false;
	    }
	  }

	  private String closeAlertAndGetItsText() {
	    try {
	      Alert alert = driver.switchTo().alert();
	      String alertText = alert.getText();
	      if (acceptNextAlert) {
	        alert.accept();
	      } else {
	        alert.dismiss();
	      }
	      return alertText;
	    } finally {
	      acceptNextAlert = true;
	    }
	  }


	  
	  private static WebDriver driver;
	  private static String baseUrl;
	  private boolean acceptNextAlert = true;
	  private StringBuffer verificationErrors = new StringBuffer();

	  
}
